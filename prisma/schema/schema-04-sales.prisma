/// Seller **sales** products.
/// 
/// `shopping_sales` is an entity that embodies "product sales" (sales) 
/// information registered by the {@link shopping_sellers seller}. And the 
/// main information of the sale is recorded in the sub 
/// {@link shopping_sale_snapshots}, not in the main `shopping_sales`. 
/// When a seller changes a previously registered item, the existing 
/// `shopping_sales` record is not changed, but a new snapshot record is 
/// created.
/// 
/// This is to preserve the {@link shopping_customers customer}'s 
/// {@link shopping_orders purchase history} flawlessly after the customer 
/// purchases a specific item, even if the seller changes the components or 
/// price of the item. It is also intended to support sellers in so-called 
/// A/B testing, which involves changing components or prices and measuring 
/// the performance in each case.
///
/// @namespace Sales
/// @erd Systematic
/// @erd Favorites
/// @author Samchon
model shopping_sales {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged section's {@link shopping_sections.id}
  shopping_section_id String @db.Uuid

  /// Belonged seller's {@link shopping_customers.id}
  shopping_seller_customer_id String @db.Uuid

  /// Creation time of record.
  ///
  /// Note that, this property is different with `opened_at`, which means
  /// the opening time of sale.
  created_at DateTime @db.Timestamptz

  /// Opening time of sale.
  ///
  /// If `null` value assigned, it means not opened yet.
  opened_at DateTime? @db.Timestamptz

  /// Closing time of sale.
  ///
  /// If `null` value assigned, the sale is forever.
  closed_at DateTime? @db.Timestamptz

  /// Paused time.
  ///
  /// The time when seller paused the sale in some reason.
  ///
  /// {@link shopping_customers Customers} still can see the sale in list 
  /// and detail page, but a label "The sale is paused for a while by seller" 
  /// be attached.
  paused_at DateTime? @db.Timestamptz

  /// Suspended time.
  ///
  /// The time when seller suspended the sale in some reason.
  ///
  /// {@link shopping_customers Customers} can't see the sale in list and 
  /// detail page. It seems almost same with soft deletion, but there're 
  /// some differences. 
  ///
  /// At 1st, seller and {@link shopping_administrators administrator} can
  /// see suspended sale in list and detail page. At 2nd, seller can
  /// resume the sale at any time.
  suspended_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  section                        shopping_sections                @relation(fields: [shopping_section_id], references: [id], onDelete: Cascade)
  sellerCustomer                 shopping_customers               @relation(fields: [shopping_seller_customer_id], references: [id], onDelete: Cascade)
  snapshots                      shopping_sale_snapshots[]
  shopping_coupon_sale_criterias shopping_coupon_sale_criterias[]

  mv_last                 mv_shopping_sale_last_snapshots?
  shopping_sale_favorites shopping_sale_favorites[]

  @@index([shopping_section_id])
  @@index([shopping_seller_customer_id])
  @@index([created_at])
  @@index([opened_at, closed_at, suspended_at])
}

/// Sale snapshot information.
/// 
/// `shopping_sale_snapshots` is an entity representing snapshot record of
/// belonged {@link shopping_sales sale}. The snapshot record is created
/// whenever the seller newly creates or updates the sale.
///
/// Sale | Cart | Order
/// -----|------|------
/// x | {@link shopping_carts} | {@link shopping_orders}
/// {@link shopping_sale_snapshots} | {@link shopping_cart_commodities} | {@link shopping_order_goods}
/// {@link shopping_sale_snapshot_unit_stocks} | {@link shopping_cart_commodity_stocks} | x
///
/// @namespace Sales
/// @erd Systematic
/// @erd Inquiries
/// @erd Carts
/// @erd Favorites
/// @author Samchon
model shopping_sale_snapshots {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged sale's {@link shopping_sales.id}
  shopping_sale_id String @db.Uuid

  /// Creation time of record.
  ///
  /// It means the time when the seller created or updated the sale.
  created_at DateTime @db.Timestamptz

  //----
  // RELATIONS
  //----
  /// Belonged sale.
  sale shopping_sales @relation(fields: [shopping_sale_id], references: [id], onDelete: Cascade)

  content       shopping_sale_snapshot_contents?
  units         shopping_sale_snapshot_units[]
  tags          shopping_sale_snapshot_tags[]
  to_categories shopping_sale_snapshot_categories[]

  shopping_cart_commodities        shopping_cart_commodities[]
  shopping_sale_snapshot_inquiries shopping_sale_snapshot_inquiries[]

  mv_last                 mv_shopping_sale_last_snapshots?
  mv_price_range          mv_shopping_sale_snapshot_prices?
  shopping_sale_favorites shopping_sale_favorites[]

  @@index([shopping_sale_id, created_at])
}

/// Product composition information handled in the sale snapshot.
/// 
/// `shopping_sale_snapshot_units` is an entity that embodies the 
/// "individual product" information handled in the 
/// {@link shopping_sale_snapshots sale snapshot}.
/// 
/// For reference, the reason why `shopping_sale_snapshot_units` is separated 
/// from {@link shopping_sale_snapshots} by an algebraic relationship of 
/// 1: N is because there are some cases where multiple products are sold 
/// in one listing. This is the case with so-called "bundled products".
/// 
/// - Bundle from regular product (Macbook Set)
///   - main body
///   - keyboard
///   - mouse
///   - Apple Care (Free A/S Voucher)
/// 
/// And again, `shopping_sale_snapshot_units` does not in itself refer to 
/// the final {@link shopping_sale_snapshot_unit_stocks stock} that the 
/// customer will purchase. 
/// The {@link shopping_sale_snapshot_unit_stocks final stock} can be 
/// found only after selecting all given 
/// {@link shopping_sale_snapshot_unit_options options} and their 
/// {@link shopping_sale_snapshot_unit_option_candidates candidate} values.
/// 
/// For example, even if you buy a Macbook, the 
/// {@link shopping_sale_snapshot_unit_stocks final stocks} are determined 
/// only after selecting all the 
/// {@link shopping_sale_snapshot_unit_options options} (CPU / RAM / SSD), etc.
///
/// @namespace Sales
/// @erd Carts
/// @author Samchon
model shopping_sale_snapshot_units {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged snapshot's {@link shopping_sale_snapshots.id}
  shopping_sale_snapshot_id String @db.Uuid

  /// Representative name of the unit.
  name String @db.VarChar

  /// Whether the unit is primary or not.
  ///
  /// Just a labeling value.
  primary Boolean @db.Boolean

  /// Whether the unit is required or not.
  ///
  /// When the unit is required, the customer must select the unit. If do
  /// not select, customer can't buy it.
  ///
  /// For example, if there's a sale "Macbook Set" and one of the unit is 
  /// the "Main Body", is it possible to buy the "Macbook Set" without the 
  /// "Main Body" unit? This property is for that case.
  required Boolean @db.Boolean

  /// Sequence order in belonged snapshot.
  sequence Int @db.Integer

  //----
  // RELATIONS
  //----
  /// Belonged snapshot.
  snapshot shopping_sale_snapshots @relation(fields: [shopping_sale_snapshot_id], references: [id], onDelete: Cascade)

  /// List of options.
  options shopping_sale_snapshot_unit_options[]

  /// List of stocks.
  stocks                         shopping_sale_snapshot_unit_stocks[]
  shopping_cart_commodity_stocks shopping_cart_commodity_stocks[]
  mv_price_range                 mv_shopping_sale_snapshot_unit_prices?

  @@unique([shopping_sale_snapshot_id, name])
}

/// Individual option information on units for sale.
/// 
/// `shopping_sale_snapshot_unit_options` is a subsidiary entity of 
/// {@link shopping_sale_snapshot_units} that represents individual products 
/// in the sale, and is an entity designed to represent individual option 
/// information for the unit.
/// 
/// - Examples of Options
///   - optional options
///   - Computer: CPU, RAM, SSD, etc.
///   - Clothes: size, color, style, etc.
///   - descriptive options
///   - Engrave
///   - Simple question
///
/// If the `type` of option is a `variable` value in `"select"`, the 
/// {@link shopping_sale_snapshot_unit_stocks final stock} that the customer 
/// will purchase changes depending on the selection of the 
/// {@link shopping_sale_snapshot_unit_option_candidates candidate} value.
///
/// Conversely, if it is a `type` other than `"select"`, or if the `type` 
/// is `"select"` but `variable` is `false`, this is an option that has no 
/// meaning beyond simple information transfer. Therefore, no matter what 
/// value the customer enters and chooses when purchasing it, the option in 
/// this case does not affect the 
/// {@link shopping_sale_snapshot_unit_stocks final stock}.
///
/// @namespace Sales
/// @erd Carts
/// @author Samchon
model shopping_sale_snapshot_unit_options {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged unit's {@link shopping_sale_snapshot_units.id}
  shopping_sale_snapshot_unit_id String @db.Uuid

  /// Name of the option.
  name String @db.VarChar

  /// Type of the option.
  ///
  /// - `select`: The way selecting one of the candidate values.
  /// - `boolean`
  /// - `number`
  /// - `string`
  type String @db.VarChar

  /// Whether the option is variable or not.
  ///
  /// When `type` of current option is `"select"`, this attribute means
  /// whether selecting different 
  /// {@link shopping_sale_snapshot_unit_option_candidate candidate} value 
  /// affects the {@link shopping_sale_snapshot_unit_stocks final stock}
  /// or not.
  ///
  /// For reference, if `type` value is not `"select"`, this attribute
  /// is always `false`.
  variable Boolean @db.Boolean

  /// Sequence order in belonged unit.
  sequence Int @db.Integer

  //----
  // RELATIONS
  //----
  /// Belonged unit.
  unit shopping_sale_snapshot_units @relation(fields: [shopping_sale_snapshot_unit_id], references: [id], onDelete: Cascade)

  /// List of candidates.
  candidates                                shopping_sale_snapshot_unit_option_candidates[]
  shopping_cart_commodity_stock_choices     shopping_cart_commodity_stock_choices[]
  shopping_sale_snapshot_unit_stock_choices shopping_sale_snapshot_unit_stock_choices[]

  @@unique([shopping_sale_snapshot_unit_id, name])
}

/// Selectable candidate values within an option.
/// 
/// `shopping_sale_snapshot_unit_option_candidates` is an entity that 
/// represents individual candidate values that can be selected from 
/// {@link shopping_sale_snapshot_unit_options options} of the "select" type.
/// 
/// - Example
///   - RAM: 8GB, 16GB, 32GB
///   - GPU: RTX 3060, RTX 4080, TESLA
///   - License: Private, Commercial, Educatiion
/// 
/// By the way, if belonged {@link shopping_sale_snapshot_unit_options option} 
/// is not "select" type, this entity never being used.
///
/// @namespace Sales
/// @erd Carts
/// @author Samchon
model shopping_sale_snapshot_unit_option_candidates {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged option's {@link shopping_sale_snapshot_unit_options.id}
  shopping_sale_snapshot_unit_option_id String @db.Uuid

  /// Representative name of candidate value.
  name String @db.VarChar

  /// Sequence order in option.
  sequence Int @db.Integer

  //----
  // RELATIONS
  //----
  /// Belonged entity.
  option shopping_sale_snapshot_unit_options @relation(fields: [shopping_sale_snapshot_unit_option_id], references: [id], onDelete: Cascade)

  /// List of choices in stock.
  choices                               shopping_sale_snapshot_unit_stock_choices[]
  shopping_cart_commodity_stock_choices shopping_cart_commodity_stock_choices[]

  @@unique([shopping_sale_snapshot_unit_option_id, name])
}

/// Final component information on units for sale.
/// 
/// `shopping_sale_snapshot_unit_stocks` is a subsidiary entity of 
/// {@link shopping_sale_snapshot_units} that represents a product catalog 
/// for sale, and is a kind of final stock that is constructed by selecting 
/// all {@link shopping_sale_snapshot_unit_options options} 
/// (variable "select" type) and their 
/// {@link shopping_sale_snapshot_unit_option_candidates candidate} values in 
/// the belonging unit. It is the "good" itself that customers actually 
/// purchase.
/// 
/// - Product Name) MacBook
///   - Options
///   - CPU: { i3, i5, i7, i9 }
///   - RAM: { 8GB, 16GB, 32GB, 64GB, 96GB }
///   - SSD: { 256GB, 512GB, 1TB }
///   - Number of final stocks: 4 * 5 * 3 = 60
///
/// For reference, the total number of `shopping_sale_snapshot_unit_stocks` 
/// records in an attribution unit can be obtained using Cartesian Product. 
/// In other words, the value obtained by multiplying all the candidate 
/// values that each (variable "select" type) option can have by the number 
/// of cases is the total number of final stocks in the unit. 
///
/// Of course, without a single variable "select" type option, the final 
/// stocks count in the unit is only 1.
///
/// @namespace Sales
/// @erd Carts
/// @author Samchon
model shopping_sale_snapshot_unit_stocks {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged unit's {@link shopping_sale_snapshot_units.id}
  shopping_sale_snapshot_unit_id String @db.Uuid

  /// Name of the final stock.
  name String @db.VarChar

  /// Nominal price.
  ///
  /// This is not real price to pay, but just a nominal price to show.
  /// If this value is greater than the `real_price`, it would be shown
  /// like seller is giving a discount.
  nominal_price Float @db.DoublePrecision

  /// Real price to pay.
  real_price Float @db.DoublePrecision

  /// Initial inventory quantity.
  ///
  /// If this stock has been sold over this quantity count, the stock can't
  /// be sold anymore, because of out of stock. In that case, the seller can
  /// supplement the inventory quantity by registering some 
  /// {@link shopping_sale_snapshot_unit_stock_supplements} records.
  quantity Int

  /// Sequence order in belonged unit.
  sequence Int @db.Integer

  //----
  // RELATIONS
  //----
  /// Belonged unit.
  unit shopping_sale_snapshot_units @relation(fields: [shopping_sale_snapshot_unit_id], references: [id], onDelete: Cascade)

  /// List of choices.
  ///
  /// Which candidate values are chosen in each option.
  choices shopping_sale_snapshot_unit_stock_choices[]

  /// List of supplements of inventory quantity.
  supplements shopping_sale_snapshot_unit_stock_supplements[]

  shopping_cart_commodity_stocks shopping_cart_commodity_stocks[]

  mv_inventory             mv_shopping_sale_snapshot_unit_stock_inventories?
  shopping_delivery_pieces shopping_delivery_pieces[]

  @@unique([shopping_sale_snapshot_unit_id, name])
}

/// Selection information of final stock.
/// 
/// `shopping_sale_snapshot_unit_stock_choices` is an entity that represents 
/// which {@link shopping_sale_snapshot_unit_options option} of each `variable` 
/// "select" `type` was selected for each stock and which 
/// {@link shopping_sale_snapshot_unit_option_candidates candidate value} was 
/// selected within it.
/// 
/// Of course, if the bound {@link shopping_sale_snapshot_units unit} does not 
/// have any {@link shopping_sale_snapshot_unit_options options}, this entity 
/// can also be ignored.
///
/// @namespace Sales
/// @author Samchon
model shopping_sale_snapshot_unit_stock_choices {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged stock's {@link shopping_sale_snapshot_unit_stocks.id}
  shopping_sale_snapshot_unit_stock_id String @db.Uuid

  /// Belonged option's {@link shopping_sale_snapshot_unit_options.id}
  shopping_sale_snapshot_unit_option_id String @db.Uuid

  /// Belonged candidate's {@link shopping_sale_snapshot_unit_option_candidates.id}
  shopping_sale_snapshot_unit_option_candidate_id String @db.Uuid

  /// Sequence order in belonged stock.
  sequence Int @db.Integer

  //----
  // RELATIONS
  //----
  /// Belonged stock.
  stock shopping_sale_snapshot_unit_stocks @relation(map: "fk_shopping_sale_snapshot_unit_stock_choices_stock", fields: [shopping_sale_snapshot_unit_stock_id], references: [id], onDelete: Cascade)

  option shopping_sale_snapshot_unit_options? @relation(map: "fk_shopping_sale_snapshot_unit_stock_choices_option", fields: [shopping_sale_snapshot_unit_option_id], references: [id], onDelete: Cascade)

  /// Belonged candidate.
  candidate shopping_sale_snapshot_unit_option_candidates? @relation(map: "fk_shopping_sale_snapshot_unit_stock_choices_candidate", fields: [shopping_sale_snapshot_unit_option_candidate_id], references: [id], onDelete: Cascade)

  @@unique([shopping_sale_snapshot_unit_stock_id, shopping_sale_snapshot_unit_option_candidate_id])
}

/// Supplementation of inventory quantity of stock.
///
/// You know what? If a stock has been sold over its 
/// {@link shopping_sale_snapshot_unit_stocks.inventory initial inventory quantity},
/// the stock can't be sold anymore, because of out of stock. In that case, how the
/// {@link shopping_sellers} should do?
///
/// When the sotck is sold out, seller can supplement the inventory record by
/// registering this `shopping_sale_snapshot_unit_stock_supplements` record. Right,
/// this `shopping_sale_snapshot_unit_stock_supplements` is an entity that embodies
/// the supplementation of the inventory quantity of the belonged 
/// {@link shopping_sale_snapshot_unit_stocks stock}.
///
/// @describe Sales
/// @author Samchon
model shopping_sale_snapshot_unit_stock_supplements {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged stock's {@link shopping_sale_snapshot_unit_stocks.id}
  shopping_sale_snapshot_unit_stock_id String @db.Uuid

  /// Supplemented inventory quantity.
  quantity Int

  /// Creation time of record.
  ///
  /// When the inventory be supplemented.
  created_at DateTime @db.Timestamptz

  //----
  // RELATIONS
  //----
  /// Belonged stock.
  stock shopping_sale_snapshot_unit_stocks @relation(fields: [shopping_sale_snapshot_unit_stock_id], references: [id], onDelete: Cascade)

  @@index([shopping_sale_snapshot_unit_stock_id, created_at])
}

/// Category classification info of sale snapshot.
///
/// `shopping_sale_snapshot_categories` is an entity that expresses 
/// which {@link shopping_channel_categories category} the listing 
/// {@link shopping_sale_snapshots snapshot}.
/// 
/// It is designed to resolve the M:N relationship between 
/// {@link shopping_sale_snapshots} and {@link shopping_channel_categories}, 
/// respectively. Of course, if the target category being referred to is a 
/// major category, all minor categories belonging to it can also be used.
///
/// @namespace Sales
/// @erd Systematic
/// @author Samchon
model shopping_sale_snapshot_categories {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged snapshot's {@link shopping_sale_snapshots.id}
  shopping_sale_snapshot_id String @db.Uuid

  /// Belonged category's {@link shopping_channel_categories.id}
  shopping_channel_category_id String @db.Uuid

  /// Sequence order in belonged snapshot.
  sequence Int @db.Integer

  //----
  // RELATIONS
  //----
  snapshot shopping_sale_snapshots     @relation(fields: [shopping_sale_snapshot_id], references: [id], onDelete: Cascade)
  category shopping_channel_categories @relation(fields: [shopping_channel_category_id], references: [id], onDelete: Cascade)

  @@unique([shopping_sale_snapshot_id, shopping_channel_category_id])
  @@index([shopping_channel_category_id])
}

/// Content information of sale snapshot.
///
/// `shopping_sale_snapshot_contents` is an entity embodies the body contents 
/// of {@link shopping_sale_snapshots sale snapshot}. Also, it contains
/// revert policy of the sale.
///
/// @describe Sales
/// @author Samchon
model shopping_sale_snapshot_contents {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged snapshot's {@link shopping_sale_snapshots.id}
  shopping_sale_snapshot_id String @db.Uuid

  /// Title of the content.
  title String @db.VarChar

  /// Format of the body content.
  ///
  /// Same meaning with extension like `html`, `md`, `txt`.
  format String @db.VarChar

  /// The main body content.
  body String @db.Text

  /// Revert policy.
  ///
  /// This is essential in South Korea, but I don't know well in overseas.
  ///
  /// Just use when you need.
  revert_policy String? @db.VarChar

  //----
  // RELATIONS
  //----
  /// Belonged snapshot.
  snapshot shopping_sale_snapshots @relation(fields: [shopping_sale_snapshot_id], references: [id], onDelete: Cascade)

  to_files      shopping_sale_snapshot_content_files[]
  to_thumbnails shopping_sale_snapshot_content_thumbnails[]

  @@unique([shopping_sale_snapshot_id])
  @@index([title(ops: raw("gin_trgm_ops"))], type: Gin)
  @@index([body(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Attachment file of sale snapshot content.
///
/// @describe Sales
/// @author Samchon
model shopping_sale_snapshot_content_files {
  id                                String @id @db.Uuid
  shopping_sale_snapshot_content_id String @db.Uuid
  attachment_file_id                String @db.Uuid
  sequence                          Int    @db.Integer

  content shopping_sale_snapshot_contents @relation(fields: [shopping_sale_snapshot_content_id], references: [id], onDelete: Cascade)
  file    attachment_files                @relation(fields: [attachment_file_id], references: [id], onDelete: Cascade)

  @@index([shopping_sale_snapshot_content_id])
  @@index([attachment_file_id])
}

/// Thumbnail of sale snapshot content.
///
/// @describe Sales
/// @author Samchon
model shopping_sale_snapshot_content_thumbnails {
  id                                String @id @db.Uuid
  shopping_sale_snapshot_content_id String @db.Uuid
  attachment_file_id                String @db.Uuid
  sequence                          Int    @db.Integer

  content shopping_sale_snapshot_contents @relation(fields: [shopping_sale_snapshot_content_id], references: [id], onDelete: Cascade)
  file    attachment_files                @relation(fields: [attachment_file_id], references: [id], onDelete: Cascade)

  @@index([shopping_sale_snapshot_content_id])
  @@index([attachment_file_id])
}

/// Search tag of sale snapshot.
///
/// @describe Sales
/// @author Samchon
model shopping_sale_snapshot_tags {
  id                        String @id @db.Uuid
  shopping_sale_snapshot_id String @db.Uuid
  value                     String @db.VarChar
  sequence                  Int    @db.Integer

  snapshot shopping_sale_snapshots @relation(fields: [shopping_sale_snapshot_id], references: [id], onDelete: Cascade)

  @@unique([shopping_sale_snapshot_id, value])
  @@index([value(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// @hidden
model mv_shopping_sale_last_snapshots {
  shopping_sale_id          String @id @db.Uuid
  shopping_sale_snapshot_id String @db.Uuid

  sale     shopping_sales          @relation(fields: [shopping_sale_id], references: [id], onDelete: Cascade)
  snapshot shopping_sale_snapshots @relation(fields: [shopping_sale_snapshot_id], references: [id], onDelete: Cascade)

  @@unique([shopping_sale_snapshot_id])
}

/// @hidden
model mv_shopping_sale_snapshot_prices {
  shopping_sale_snapshot_id String @id @db.Uuid
  nominal_lowest            Float  @db.DoublePrecision
  nominal_highest           Float  @db.DoublePrecision
  real_lowest               Float  @db.DoublePrecision
  real_highest              Float  @db.DoublePrecision

  snapshot shopping_sale_snapshots @relation(fields: [shopping_sale_snapshot_id], references: [id], onDelete: Cascade)

  @@index([real_lowest, real_highest])
}

/// @hidden
model mv_shopping_sale_snapshot_unit_prices {
  shopping_sale_snapshot_unit_id String @id @db.Uuid
  nominal_lowest                 Float  @db.DoublePrecision
  nominal_highest                Float  @db.DoublePrecision
  real_lowest                    Float  @db.DoublePrecision
  real_highest                   Float  @db.DoublePrecision

  unit shopping_sale_snapshot_units @relation(fields: [shopping_sale_snapshot_unit_id], references: [id], onDelete: Cascade)
}

/// @hidden
model mv_shopping_sale_snapshot_unit_stock_inventories {
  shopping_sale_snapshot_unit_stock_id String @id @db.Uuid
  income                               Int    @db.Integer
  outcome                              Int    @db.Integer

  stock shopping_sale_snapshot_unit_stocks @relation(fields: [shopping_sale_snapshot_unit_stock_id], references: [id], onDelete: Cascade)

  @@index([shopping_sale_snapshot_unit_stock_id])
}
