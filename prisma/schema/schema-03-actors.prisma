/// Customer information, but not a person but a **connection** basis.
///
/// `shopping_customers` is an entity that literally embodies the information 
/// of those who participated in the market as customers. By the way, the
/// `shopping_Customers` does not mean a person, but a **connection** basis.
/// Therefore, even if the same person connects to the shopping mall multiple,
/// multiple records are created in `shopping_customers`.
/// 
/// The first purpose of this is to track the customer's inflow path in detail, and 
/// it is for cases where the same person enters as a non-member, puts items in the 
/// {@link shopping_cart_commodities shopping cart} in advance, and only authenticates 
/// their real name or registers/logs in at the moment of 
/// {@link shopping_order_publishes payment}. It is the second. Lastly, it is 
/// to accurately track the activities that a person performs at the 
/// shopping mall in various ways like below.
///
/// - Same person comes from an {@link shopping_external_users external service}
/// - Same person creates multiple {@link shopping_members accounts}
/// - Same person makes a purchase as a non-member with only {@link shopping_citizens real name authentication}
/// - Same person acts both {@link shopping_sellers seller} and {@link shopping_administrators admin} at the same time
/// 
/// Therefore, `shopping_customers` can have multiple records with the same 
/// {@link shopping_citizens}, {@link shopping_members}, and 
/// {@link shopping_external_users}. Additionally, if a customer signs up for 
/// membership after verifying their real name or signs up for our service 
/// after being a user of an external service, all related records are changed 
/// at once. Therefore, identification and tracking of customers can be done 
/// very systematically.
///
/// @namespace Actors
/// @erd Coins
/// @erd Favorites
/// @author Samchon
model shopping_customers {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged channel's {@link shopping_channels.id}
  shopping_channel_id String @db.Uuid /// @format uuid

  /// Belonged member's {@link shopping_members.id}
  shopping_member_id String? @db.Uuid /// @format uuid

  /// Belonged external service user's {@link shopping_external_users.id}
  shopping_external_user_id String? @db.Uuid /// @format uuid

  /// Belonged citizen's {@link shopping_citizens.id}
  shopping_citizen_id String? @db.Uuid /// @format uuid

  /// Connection URL.
  ///
  /// {@link window.location.href}
  href String @db.VarChar(1024)

  /// Referrer URL.
  ///
  /// {@link window.document.referrer}
  referrer String? @db.VarChar(1024)

  /// IP address,
  ip String @db.VarChar

  /// Creation time of record.
  ///
  /// It means the time when the customer connected to the shopping mall.
  created_at DateTime @db.Timestamptz

  //----
  // RELATIONS
  //----
  /// Belonged channel.
  channel shopping_channels @relation(fields: [shopping_channel_id], references: [id], onDelete: Cascade)

  /// Belonged member.
  member shopping_members? @relation(fields: [shopping_member_id], references: [id], onDelete: Cascade)

  /// Belonged external user.
  external_user shopping_external_users? @relation(fields: [shopping_external_user_id], references: [id], onDelete: Cascade)

  /// Belonged citizen.
  citizen shopping_citizens? @relation(fields: [shopping_citizen_id], references: [id], onDelete: Cascade)

  shopping_carts                           shopping_carts[]
  shopping_coupons                         shopping_coupons[]
  shopping_coupon_tickets                  shopping_coupon_tickets[]
  shopping_deliveries                      shopping_deliveries[]
  shopping_deposit_charges                 shopping_deposit_charges[]
  shopping_orders                          shopping_orders[]
  shopping_sales                           shopping_sales[]
  shopping_sale_snapshot_inquiries         shopping_sale_snapshot_inquiries[]
  shopping_sale_snapshot_inquiry_answers   shopping_sale_snapshot_inquiry_answers[]
  shopping_sale_snapshot_inquiry_comments  shopping_sale_snapshot_inquiry_comments[]
  shopping_sale_favorites                  shopping_sale_favorites[]
  shopping_sale_snapshot_inquiry_favorites shopping_sale_snapshot_inquiry_favorites[]
  shopping_address_favorites               shopping_address_favorites[]
  shopping_mileage_donations               shopping_mileage_donations[]

  @@index([shopping_channel_id, created_at])
  @@index([shopping_citizen_id, created_at])
  @@index([shopping_external_user_id, created_at])
  @@index([shopping_member_id, created_at])
  @@index([href])
  @@index([referrer])
  @@index([ip])
  @@index([created_at])
}

/// External user information.
/// 
/// `shopping_external_users` is an entity dsigned for when this system needs 
/// to connect with external services and welcome their users as customers of 
/// this service.
/// 
/// For reference, customers who connect from an external service must have 
/// this record, and the external service user is identified through the two 
/// attributes `application` and `uid`. If a customer connected from an 
/// external service completes {@link shopping_citizens real-name authentication} 
/// from this service, each time the external service user reconnects to this 
/// service and issues a new {@link shopping_customers customer} authentication 
/// token, {@link shopping_citizens real-name authentication} begins with 
/// completed.
/// 
/// And `password` is the password issued to the user by the external service 
/// system (the so-called permanent user authentication token), and is never 
/// the actual user password. However, for customers who entered the same 
/// `application` and `uid` as the current external system user, this is to 
/// determine whether to view this as a correct external system user or a 
/// violation.
/// 
/// In addition, additional information received from external services can 
/// be recorded in the `data` field in JSON format.
///
/// @namespace Actors
/// @author Samchon
model shopping_external_users {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged channel's {@link shopping_channels.id}
  shopping_channel_id String @db.Uuid

  /// Belonged citizen's {@link shopping_citizens.id}
  shopping_citizen_id String? @db.Uuid

  /// Identifier code of the external service.
  ///
  /// It can be same with {@link shopping_channels.code} in common.
  application String @db.VarChar

  /// Identifier key of external user from the external system.
  uid String @db.VarChar

  /// Nickname of external user in the external system.
  nickname String @db.VarChar

  /// Additional information about external user from the external system.
  data String?

  /// Password of external user from the external system.
  ///
  /// This is a password issued to the user by an external service, and is 
  /// by no means the actual user password. However, for customers who 
  /// entered the same application and code as the current external system 
  /// user, this is to determine whether to view this as a correct external 
  /// system user or a violation.
  password String @db.VarChar

  /// Creation time of record.
  ///
  /// Another word, first time when the external user connected.
  created_at DateTime

  //----
  // RELATIONS
  //----
  channel            shopping_channels    @relation(fields: [shopping_channel_id], references: [id], onDelete: Cascade)
  citizen            shopping_citizens?   @relation(fields: [shopping_citizen_id], references: [id], onDelete: Cascade)
  shopping_customers shopping_customers[]

  @@unique([shopping_channel_id, application, uid])
  @@unique([shopping_channel_id, application, nickname])
  @@index([shopping_citizen_id])
  @@index([application, created_at])
  @@index([created_at])
  @@index([nickname(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Citizen verification information.
/// 
/// `shopping_citizens` is an entity that records the user's real name and 
/// mobile input information.
/// 
/// For reference, in South Korea, real name authentication is required for 
/// e-commerce participants, so the `name` attribute is important. However, 
/// the situation is different overseas, so in reality, `mobile` attributes 
/// are the most important, and identification of individual users is also 
/// done based on this mobile.
/// 
/// Of course, real name and mobile phone authentication information are 
/// encrypted and stored.
///
/// @namespace Actors
/// @erd Coins
/// @author Samchon
model shopping_citizens {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged channel's {@link shopping_channels.id}
  ///
  /// This is to manage personal information separately for each channel, 
  /// and also to recognize cases where the same citizen is authenticated 
  /// through different channels.
  shopping_channel_id String? @db.Uuid

  /// Mobile phone number.
  mobile String @db.VarChar

  /// Real name, or equivalent name identifiable.
  name String @db.VarChar

  /// Creation time of record.
  ///
  /// In other words, the 1st time of citizen activation.
  created_at DateTime @db.Timestamptz

  /// Deletion time of record.
  deleted_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  channel shopping_channels? @relation(fields: [shopping_channel_id], references: [id], onDelete: Cascade)

  customers         shopping_customers[]
  members           shopping_members[]
  deposit_histories shopping_deposit_histories[]
  mileage_histories shopping_mileage_histories[]

  mv_deposit_balance                     mv_shopping_deposit_balances?
  mv_mileage_balance                     mv_shopping_mileage_balances?
  mv_shopping_coupon_citizen_inventories mv_shopping_coupon_citizen_inventories[]
  shopping_external_users                shopping_external_users[]
  shopping_mileage_donations             shopping_mileage_donations[]

  @@unique([shopping_channel_id, mobile])
  @@index([mobile])
  @@index([name])
  @@index([created_at])
}

/// Member Account.
/// 
/// `shopping_members` is an entity that symbolizes the case when a user 
/// signs up as a member of this system.
/// 
/// In addition, `shopping_members` itself is a supertype entity, forming 
/// and managing subtypes for various types of members. However, 
/// {@link shopping_customers} are an exception, and due to the nature of 
/// their records being created on a per-connection basis, they are not 
/// divided into separate subtype entities when they sign up for membership.
/// 
/// For reference, `shopping_members` allows multiple subtypes. Therefore, 
/// it is also possible for a {@link shopping_citizens citizen} to be sometimes 
/// a {@link shopping_customers customer}, sometimes a 
/// {@link shopping_sellers seller}, sometimes an 
/// {@link shopping_administrators administrator}, and so on. 
/// 
/// Of course, this is according to system theory, and it is unclear what 
/// the planning will be like.
///
/// @namespace Actors
/// @author Samchon
model shopping_members {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged channel's {@link shopping_channels.id}
  shopping_channel_id String @db.Uuid

  /// Belonged citizen's {@link shopping_citizens.id}
  shopping_citizen_id String? @db.Uuid

  /// Nickname.
  nickname String @db.VarChar

  /// Password for log-in.
  password String @db.VarChar

  /// Creation time of record.
  ///
  /// In other words, the joining time.
  created_at DateTime @db.Timestamptz

  /// Update time of record.
  updated_at DateTime @db.Timestamptz

  /// Deletion time of record.
  withdrawn_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  /// Belonged channel.
  channel shopping_channels @relation(fields: [shopping_channel_id], references: [id], onDelete: Cascade)

  /// Belonged citizen.
  citizen shopping_citizens? @relation(fields: [shopping_citizen_id], references: [id], onDelete: Cascade)

  /// List of customer records (connections).
  customers shopping_customers[]

  /// List of email addresses.
  emails shopping_member_emails[]

  of_seller shopping_sellers?
  of_admin  shopping_administrators?

  @@unique([shopping_channel_id, nickname])
  @@unique([shopping_channel_id, shopping_citizen_id])
  @@index([shopping_citizen_id])
  @@index([nickname(ops: raw("gin_trgm_ops"))], type: Gin)
  @@index([created_at])
}

/// Email address of member.
///
/// This system allows multiple email addresses to be registered for one
/// {@link shopping_members member}. If you don't have to plan such multiple
/// email addresses, just use only one.
///
/// @namespace Actors
/// @author Samchon
model shopping_member_emails {
  //----
  // COLUMNS
  //----
  id String @id @db.Uuid

  /// Belonged channel's {@link shopping_channels.id}
  ///
  /// Duplicated attribute with {@link shopping_members.channel_id}, but
  /// just denormalized for composing unique constraint.
  ///
  /// @hidden
  shopping_channel_id String @db.Uuid

  /// Belonged member's {@link shopping_members.id}
  shopping_member_id String @db.Uuid

  /// Email address.
  value String @db.VarChar

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  //----
  // RELATIONS
  //----
  channel shopping_channels @relation(fields: [shopping_channel_id], references: [id], onDelete: Cascade)
  member  shopping_members  @relation(fields: [shopping_member_id], references: [id], onDelete: Cascade)

  @@unique([shopping_channel_id, value])
  @@unique([shopping_member_id, value])
  @@index([value(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Seller information.
///
/// `shopping_sellers` is an entity that embodies a person who registers
/// {@link shoppingsales sales} to operate selling activities, with 
/// {@link shoppingmembers membership} joining.
///
/// For reference, unlike {@link shopping_customers customers} which can 
/// participate even without {@link shopping_members membership} joining, 
/// seller must join membership to operate sales. Also, seller must
/// do the {@link shopping_citizens real-name authentication}, too. 
///
/// @namespace Actors
/// @author Samchon
model shopping_sellers {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged member's {@link shopping_members.id}.
  shopping_member_id String @db.Uuid

  /// Creation time of record.
  ///
  /// Joining time as seller, and it can be different with 
  /// {@link shopping_members membership} joining time.
  created_at DateTime @db.Timestamptz

  /// Withdrawal time.
  ///
  /// It can be different with {@link shopping_members.deleted_at}.
  deleted_at DateTime? @db.Timestamptz

  //----
  // RELATIONSHIPS
  //----
  member                                  shopping_members                          @relation(fields: [shopping_member_id], references: [id], onDelete: Cascade)
  shopping_order_goods                    shopping_order_goods[]
  shopping_coupon_seller_criterias        shopping_coupon_seller_criterias[]
  mv_shopping_order_publish_seller_states mv_shopping_order_publish_seller_states[]

  @@unique([shopping_member_id])
  @@index([created_at])
}

/// Administrator account.
///
/// `shopping_administrators` is an entity that embodies a person who manages
/// the shopping mall system, with {@link shopping_members membership} joining.
///
/// For reference, unlike {@link shopping_customers customers} which can 
/// participate even without {@link shopping_members membership} joining, 
/// administrator must join membership to operate sales. Also, administrator must
/// do the {@link shopping_citizens real-name authentication}, too. 
///
/// @todo Not detailed yet.
/// @namespace Actors
/// @author Samchon
model shopping_administrators {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged member's {@link shopping_members.id}.
  shopping_member_id String @db.Uuid

  /// Creation time of record.
  ///
  /// Joining time as an administrator, and can be different with
  /// {@link shopping_members membership} joining time.
  created_at DateTime @db.Timestamptz

  /// Deletion time of record.
  ///
  /// Withdrawal time from administrator, and can be different with
  /// {@link shopping_members.deleted_at}.
  deleted_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  member shopping_members @relation(fields: [shopping_member_id], references: [id], onDelete: Cascade)

  @@unique([shopping_member_id])
  @@index([created_at])
}

/// The address information.
///
/// @namespace Actors
/// @erd Orders
/// @erd Favorites
/// @author Samchon
model shopping_addresses {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Mobile number.
  mobile String @db.VarChar

  /// Representative name of the address.
  ///
  /// Sometimes be receiver's name, and sometimes be place name.
  name String @db.VarChar

  /// Target country.
  country String @db.VarChar

  /// Target province.
  province String @db.VarChar

  /// Target city.
  city String @db.VarChar

  /// Department name.
  department String @db.VarChar

  /// Detailed address containing room number.
  possession String @db.VarChar

  /// Zip code, or postal code.
  zip_code String @db.VarChar

  /// Special description if required.
  special_note String? @db.VarChar

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  //----
  // RELATIONS
  //----
  /// List of orders.
  orders                     shopping_orders[]
  shopping_address_favorites shopping_address_favorites[]
  shopping_order_publishes   shopping_order_publishes[]

  @@index([mobile])
  @@index([name])
}
