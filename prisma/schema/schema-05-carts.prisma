/// Shopping Cart.
///
/// `shopping_carts` is literally a space where 
/// {@link shopping_customers customer} temporarily stores products before
/// {@link shopping_orders purchase}.
///
/// By the way, it is possible for {@link shopping_sellers sellers} or 
/// {@link shopping_administrators administrators} to compose a shopping cart.
/// Of course, the reason why they can compose a shopping cart is not for
/// {@link shopping_orders purchasing}, but for providing a shopping cart template
/// to {@link shopping_customers customers}.
///
/// Sale | Cart | Order
/// -----|------|------
/// x | {@link shopping_carts} | {@link shopping_orders}
/// {@link shopping_sale_snapshots} | {@link shopping_cart_commodities} | {@link shopping_order_goods}
/// {@link shopping_sale_snapshot_unit_stocks} | {@link shopping_cart_commodity_stocks} | x
/// 
/// @namespace Carts
/// @author Samchon
model shopping_carts {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged customer's {@link shopping_customers.id}
  shopping_customer_id String @db.Uuid

  /// Type of the cart creator.
  ///
  /// - customer
  /// - seller
  /// - administrator
  actor_type String @db.VarChar

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  /// Deletion time of record.
  deleted_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  /// Belonged customer.
  customer shopping_customers @relation(fields: [shopping_customer_id], references: [id], onDelete: Cascade)

  /// List of commodities containing sale snapshot.
  commodities shopping_cart_commodities[]

  @@index([shopping_customer_id, actor_type, created_at, deleted_at])
}

/// Item in a shopping cart.
///
/// `shopping_cart_commodities` is an entity that represents a 
/// {@link shopping_sale_snapshots snapshot} of the items that 
/// {@link shopping_customers customer} has placed into his 
/// {@link shopping_carts shopping cart} with a 
/// {@link shopping_orders purchase} in mind. And if the customer continues 
/// this into an actual {@link shopping_orders order} in the future, 
/// `shopping_cart_commodities` be changed to {@link shopping_order_goods}.
/// 
/// And while adding a sale snapshot to the shopping cart, the customer 
/// inevitably selects specific {@link shopping_sale_snapshot_units units} and 
/// {@link shopping_sale_snapshot_unit_stocks final stocks} within the listing 
/// snapshot. Information about these units and stocks is recorded in the 
/// subsidiary entity {@link shopping_cart_commodity_stocks}. Also, there is an 
/// attribute `volume` that indicates how many sets of snapshots of the 
/// target commodity will be purchased. This "volume" is a value that will be 
/// multiplied by {@link shopping_cart_commodity_stocks.quantity}, the quantity 
/// for each component.
///
/// 
/// @namespace Carts
/// @erd Orders
/// @author Samchon
model shopping_cart_commodities {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged cart's {@link shopping_carts.id}
  shopping_cart_id String @db.Uuid

  /// Target snapshot's {@link shopping_sale_snapshots.id}
  shopping_sale_snapshot_id String @db.Uuid

  /// Volume count.
  ///
  /// The value multiplied to {@link shopping_cart_commodity_stocks.quantity}.
  volume Int @db.Integer

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  /// Deletion time of record.
  deleted_at DateTime? @db.Timestamptz

  /// Whether be published or not.
  ///
  /// Is current commodity ordered and be paid?
  ///
  /// Until purchase the commodity, the commodity can be reused to create new 
  /// cart commodity. This variable can be computed by referencing 
  /// {@link Orders order} related tables, but just denormalized for the
  /// performance reason.
  ///
  /// @hidden
  published Boolean

  //----
  // RELATIONS
  //----
  /// Belonged cart.
  cart shopping_carts @relation(fields: [shopping_cart_id], references: [id], onDelete: Cascade)

  /// Target snapshot.
  snapshot shopping_sale_snapshots @relation(fields: [shopping_sale_snapshot_id], references: [id], onDelete: Cascade)

  /// List of wrapper of final stocks.
  stocks shopping_cart_commodity_stocks[]

  /// List of order goods for purchase.
  order_goods shopping_order_goods[]

  mv_price mv_shopping_cart_commodity_prices?

  @@index([shopping_cart_id, created_at])
  @@index([shopping_sale_snapshot_id])
}

/// Final stock information of commodity added to the shopping cart.
/// 
/// `shopping_cart_commodity_stocks` is a subsidiary entity of 
/// {@link shopping_cart_commodities} that embodies the information of the 
/// {@link shopping_sale_snapshots snapshot} of the items in the shopping cart, 
/// and is a concept that corresponds to the individual 
/// {@link shopping_sale_snapshot_units units} in the target item snapshot 
/// and the {@link shopping_sale_snapshot_unit_stocks stock} finally selected 
/// among those {@link shopping_sale_snapshot_units units}.
/// 
/// Therefore, if the customer selects multiple units and stocks from the 
/// target sale snapshot, the attributed {@link shopping_cart_commodities} record 
/// also has multiple corresponding `shopping_cart_commodity_stocks` records.
/// 
/// And `shopping_cart_commodity_stocks` has a `quantity` property that indicates 
/// how many final stocks would be purchased in total. The final quantity 
/// actually purchased can be multiplied by the 
/// {@link shopping_cart_commodities.volume} value of the parent entity.
///
/// @namespace Carts
/// @erd Orders
/// @author Samchon
model shopping_cart_commodity_stocks {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged commodity's {@link shopping_cart_commodities.id}
  shopping_cart_commodity_id String @db.Uuid

  /// Target unit's {@link shopping_sale_snapshot_units.id}
  shopping_sale_snapshot_unit_id String @db.Uuid

  /// Target final stock's {@link shopping_sale_snapshot_unit_stocks.id}
  shopping_sale_snapshot_unit_stock_id String @db.Uuid

  /// Quantity count.
  quantity Int @db.Integer

  /// Sequence order in belonged cart commodity.
  sequence Int @db.Integer

  //----
  // RELATIONS
  //----
  /// Belonged cart commodity.
  commodity shopping_cart_commodities @relation(fields: [shopping_cart_commodity_id], references: [id], onDelete: Cascade)

  /// Target unit.
  unit shopping_sale_snapshot_units @relation(map: "rel_shopping_cart_commodity_stocks_unit", fields: [shopping_sale_snapshot_unit_id], references: [id], onDelete: Cascade)

  /// Target final stock.
  stock shopping_sale_snapshot_unit_stocks @relation(map: "rel_shopping_cart_commodity_stocks_stock", fields: [shopping_sale_snapshot_unit_stock_id], references: [id], onDelete: Cascade)

  /// List of choices, how customer has determined for each option.
  choices shopping_cart_commodity_stock_choices[]

  @@index([shopping_cart_commodity_id])
  @@index([shopping_sale_snapshot_unit_id], map: "idx_shopping_cart_commodity_stocks_unit")
  @@index([shopping_sale_snapshot_unit_stock_id], map: "idx_shopping_cart_commodity_stocks_stock")
}

/// Option choice information for the final stock added to the shopping cart.
/// 
/// `shopping_cart_commodity_stock_choices` is a subsidiary entity of 
/// {@link shopping_cart_commodity_stocks}. It records which 
/// {@link shopping_sale_snapshot_unit_options options} the customer 
/// specifically used while putting a specific 
/// {@link shopping_sale_snapshot_units unit} and specific 
/// {@link shopping_sale_snapshot_unit_stocks stock} of the 
/// {@link shopping_sale_snapshots sale snapshot} in the shopping cart, and 
/// which {@link shopping_sale_snapshot_unit_option_candidates candidate values} 
/// were selected or written within the shopping cart.
/// 
/// Therefore, `shopping_cart_commodity_stock_choices` has reference properties 
/// and predicate properties for candidate values in addition to references 
/// to options. If the `type` of target option is "select", enter the 
/// candidate value selected by the customer. Otherwise, enter the value 
/// written by the customer.
///
/// @namespace Carts
/// @author Samchon
model shopping_cart_commodity_stock_choices {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged cart-commodity-stock's {@link shopping_cart_commodity_stocks.id}
  shopping_cart_commodity_stock_id String @db.Uuid

  /// Target option's {@link shopping_sale_snapshot_unit_options.id}
  shopping_sale_snapshot_unit_option_id String @db.Uuid

  /// Selected candidate's {@link shopping_sale_snapshot_unit_option_candidates.id}
  shopping_sale_snapshot_unit_option_candidate_id String? @db.Uuid

  /// User-written value for descriptive option.
  value String? @db.VarChar

  /// Sequence order in belonged cart-commodity-stock.
  sequence Int @db.Integer

  //----
  // RELATIONS
  //----
  /// Belonged cart-commodity-stock.
  stock shopping_cart_commodity_stocks @relation(fields: [shopping_cart_commodity_stock_id], references: [id], onDelete: Cascade)

  /// Target option.
  option shopping_sale_snapshot_unit_options @relation(map: "rel_shopping_cart_commodity_stock_choices_option", fields: [shopping_sale_snapshot_unit_option_id], references: [id], onDelete: Cascade)

  /// Selected candidate value for "select" typed option.
  candidate shopping_sale_snapshot_unit_option_candidates? @relation(map: "rel_shopping_cart_commodity_stock_choices_candidate", fields: [shopping_sale_snapshot_unit_option_candidate_id], references: [id], onDelete: Cascade)

  @@index([shopping_cart_commodity_stock_id])
  @@index([shopping_sale_snapshot_unit_option_id], map: "idx_shopping_cart_commodity_stock_choices_option")
  @@index([shopping_sale_snapshot_unit_option_candidate_id], map: "idx_shopping_cart_commodity_stock_choices_candidate")
}

/// @hidden
model mv_shopping_cart_commodity_prices {
  shopping_cart_commodity_id String @id @db.Uuid
  nominal                    Float  @db.DoublePrecision
  real                       Float  @db.DoublePrecision
  volumed_price              Float  @db.DoublePrecision

  commodity shopping_cart_commodities @relation(fields: [shopping_cart_commodity_id], references: [id], onDelete: Cascade)
}
