/// Inquiry about a sale snapshot.
/// 
/// `shopping_sale_snapshot_inquiries` is a subtype entity of 
/// {@link bbs_articles}, and represents inquiries written by 
/// {@link shopping_customers customers} about a {@link shopping_sales sale} 
/// registered by the {@link shopping_sellers seller} (however, to trace the
/// exact {@link shopping_sale_snapshots snapshot}, it is referencing not
/// sale but snapshot).
/// 
/// In addition, since the customer is waiting for the seller's response after 
/// writing the inquiry, whether the seller has viewed the inquiry written by 
/// the customer is provided for reference as `read_by_seller_at` property. 
/// Of course, since the inquiry itself is a subtype of a article, it is also 
/// possible for sellers to communicate with each other through 
/// {@link shopping_sale_snapshot_inquiry_comments comments} before an 
/// {@link shopping_sale_snapshot_inquiry_responses official response}.
/// 
/// However, comments themselves can be made by every customers, even if they 
/// are not the person who wrote the article. Of course, it cannot be written 
/// unless the seller is a party.
///
/// @namespace Inquiries
/// @erd Favorites
/// @author Samchon
model shopping_sale_snapshot_inquiries {
  //----
  // COLUMNS
  //----
  /// PK + FK.
  id String @id @db.Uuid

  /// Belonged snapshot's {@link shopping_sale_snapshots.id}
  shopping_sale_snapshot_id String @db.Uuid

  /// Writer customer's {@link shopping_customers.id}
  shopping_customer_id String @db.Uuid

  /// Type of the inquiry article.
  ///
  /// - `question`
  /// - `review`
  type String @db.VarChar

  /// Creation time of record.
  ///
  /// Duplicated property for fast sorting.
  ///
  /// @hidden
  created_at DateTime @db.Timestamptz

  /// The first time when the seller read the inquiry.
  read_by_seller_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  base     bbs_articles            @relation(fields: [id], references: [id], onDelete: Cascade)
  snapshot shopping_sale_snapshots @relation(fields: [shopping_sale_snapshot_id], references: [id], onDelete: Cascade)
  customer shopping_customers      @relation(fields: [shopping_customer_id], references: [id], onDelete: Cascade)

  of_question                              shopping_sale_snapshot_questions?
  of_review                                shopping_sale_snapshot_reviews?
  answer                                   shopping_sale_snapshot_inquiry_answers?
  shopping_sale_snapshot_inquiry_favorites shopping_sale_snapshot_inquiry_favorites[]

  @@index([shopping_sale_snapshot_id])
  @@index([shopping_customer_id])
}

/// Question about sale snapshot.
/// 
/// `shopping_sale_snapshot_questions` is a subtype entity of 
/// {@link shopping_sale_snapshot_inquiries}, and is used when a 
/// {@link shopping_customers customer} wants to ask something about a 
/// sale ({@link shopping_sale_snapshots snapshot} at the time) registered by 
/// the {@link shopping_sellers seller}.
/// 
/// And, like most shopping malls, `shopping_sale_snapshot_questions` also 
/// provides a `secret` attribute, allowing you to create a "secret message" 
/// that can only be viewed by the seller and the customer who wrote the 
/// question.
///
/// @namespace Inquiries
/// @author Samchon
model shopping_sale_snapshot_questions {
  //----
  // COLUMNS
  //----
  /// PK + FK.
  id String @id @db.Uuid

  /// Whether secret or not.
  ///
  /// If secret article, only the writer customer and related seller can see
  /// the detailed content.
  secret Boolean @db.Boolean

  //----
  // RELATIONS
  //----
  base shopping_sale_snapshot_inquiries @relation(fields: [id], references: [id], onDelete: Cascade)
}

/// Reviews for sale snapshots.
/// 
/// `shopping_sale_snapshot_reviews` is a subtype entity of 
/// {@link shopping_sale_snapshot_inquiries}, and is used when a 
/// {@link shopping_customers customer} purchases a sale 
/// ({@link shopping_sale_snapshots snapshot} at the time) registered by the 
/// {@link shopping_sellers seller} as a product and leaves a review and 
/// rating for it.
/// 
/// For reference, `shopping_sale_snapshot_reviews` and 
/// {@link shopping_order_goods} have a logarithmic relationship of N: 1, 
/// but this does not mean that customers can continue to write reviews for 
/// the same product indefinitely. Wouldn't there be restrictions, such as 
/// if you write a review once, you can write an additional review a month 
/// later?
///
/// @namespace Inquiries
/// @author Samchon
model shopping_sale_snapshot_reviews {
  //----
  // COLUMNS
  //----
  /// PK + FK.
  id String @id @db.Uuid

  /// Belonged good's {@link shopping_order_goods.id}
  shopping_order_good_id String @db.Uuid

  //----
  // RELATIONS
  //----
  base shopping_sale_snapshot_inquiries @relation(fields: [id], references: [id], onDelete: Cascade)
  good shopping_order_goods             @relation(fields: [shopping_order_good_id], references: [id], onDelete: Cascade)

  @@index([shopping_order_good_id])
}

/// A snapshot of the content of the review for the sale snapshot.
/// 
/// `shopping_sale_snapshot_review_snapshots` is a subtype entity of 
/// {@link bbs_article_snapshots} and is designed to add a `score` property 
/// to the content of {@link shopping_sale_snapshot_reviews review article}.
/// 
/// In other words, after writing a review article, customers can edit it 
/// and change the evaluation `score` at any time.
///
/// @namespace Inquiries
/// @author Samchon
model shopping_sale_snapshot_review_snapshots {
  //----
  // COLUMNS
  //----
  /// PK + FK.
  id String @id @db.Uuid

  /// Estimation score value.
  score Float @db.DoublePrecision

  //----
  // RELATIONS
  //----
  base bbs_article_snapshots @relation(fields: [id], references: [id], onDelete: Cascade)
}

/// Answers to inquiries about sale snapshots.
/// 
/// `shopping_sale_snapshot_inquiry_answers` is an entity that embodies the 
/// official answer written by the {@link shopping_sellers seller} to the 
/// {@link shopping_sale_snapshot_inquiries inquiry} written by the 
/// {@link shopping_customers customer}.
/// 
/// Of course, in addition to writing an official response like this, it is 
/// also possible for the seller to communicate with the inquiry written 
/// customer and multiple customers through 
/// {@link shopping_sale_snapshot_inquiry_comments comments} in the 
/// attribution inquiry.
/// 
/// For reference, it is not possible to write comments on this answer. 
/// Encourage people to write comments on the inquiry article. This is to 
/// prevent comments from being scattered in both inquiry and response 
/// articles.
///
/// @namespace Inquiries
/// @author Samchon
model shopping_sale_snapshot_inquiry_answers {
  //----
  // COLUMNS
  //----
  /// PK + FK
  id String @id @db.Uuid

  /// Belonged inquiry's {@link shopping_sale_snapshot_inquiries.id}
  shopping_sale_snapshot_inquiry_id String @db.Uuid

  /// Answered seller's {@link shopping_customers.id}
  shopping_seller_customer_id String @db.Uuid

  //----
  // RELATIONS
  //----
  base           bbs_articles                     @relation(fields: [id], references: [id], onDelete: Cascade)
  inquiry        shopping_sale_snapshot_inquiries @relation(fields: [shopping_sale_snapshot_inquiry_id], references: [id], onDelete: Cascade)
  sellerCustomer shopping_customers               @relation(fields: [shopping_seller_customer_id], references: [id], onDelete: Cascade)

  @@unique([shopping_sale_snapshot_inquiry_id])
  @@index([shopping_seller_customer_id])
}

/// A comment written on an inquiry article.
/// 
/// `shopping_sale_snapshot_inquiry_comments` is a subtype entity of 
/// {@link bbs_article_comments}, and is used when you want to communicate with 
/// multiple people about an {@link shopping_sale_snapshot_inquiries inquiry} 
/// written by a {@link shopping_customers customer}.
/// 
/// For reference, only related parties can write comments for 
/// {@link shopping_sellers sellers}, but there is no limit to customers. 
/// In other words, anyone customer can freely write a comment, even if they are 
/// not the person who wrote the inquiry.
///
/// @namespace Inquiries
/// @author Samchon
model shopping_sale_snapshot_inquiry_comments {
  //----
  // COLUMNS
  //----
  /// PK + FK
  id String @id @db.Uuid

  /// Writer's {@link shopping_customers.id}
  shopping_customer_id String @db.Uuid

  /// Type of the writer.
  ///
  /// - customer
  /// - seller
  actor_type String @db.VarChar

  //----
  // RELATIONS
  //----
  base     bbs_article_comments @relation(fields: [id], references: [id], onDelete: Cascade)
  customer shopping_customers   @relation(fields: [shopping_customer_id], references: [id], onDelete: Cascade)

  @@index([shopping_customer_id])
}
