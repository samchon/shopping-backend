/// Meta information of the deposit.
/// 
/// `shopping_deposits` is an entity that embodies the specifications for 
/// incomes and outcomes of deposit at a shopping mall. In other words, 
/// `shopping_deposits` is not {@link shopping_deposit_histories}, which 
/// refers to the deposit/outcome details of deposits, but is simply 
/// metadata that specifies specifications for income/outcome scenarios.
///
/// @namespace Coins
/// @author Samchon
model shopping_deposits {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Identifier code.
  code String @db.VarChar

  /// The source table occurring the deposit event.
  source String @db.VarChar

  /// Direction of deposit.
  ///
  /// - `1`: Income
  /// - `-1`: outcome
  direction Int @db.Integer

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  //// Deletion time of record.
  deleted_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  /// List of histories; income/outcome details.
  histories shopping_deposit_histories[]

  @@unique([code])
  @@index([source])
  @@index([created_at])
}

/// Deposit income/outcome details of customers (citizens).
///
/// `shopping_deposit_histories` is an entity that embodies the 
/// {@link shopping_customers customer}'s income/outcome history.
///
/// You can think of it as a kind of accounting ledger table. Therefore, 
/// note that, `value` must have positive number only, even if it is a 
/// outcome. The minus value must be expressed by multiplying the 
/// {@link shopping_deposits.direction} value of the corresponding.
///
/// @namespace Coins
/// @author Samchon
model shopping_deposit_histories {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged metadata's {@link shopping_deposits.id}
  shopping_deposit_id String @db.Uuid

  /// Belonged citizen's {@link shopping_citizens.id}
  shopping_citizen_id String @db.Uuid

  /// The source record occurred deposit/outcome.
  source_id String @db.Uuid

  /// Income/outcome amount of deposit.
  /// 
  /// It must be a positive number, and you can check 
  /// {@link shopping_deposits.direction} for incomes and outcomes. 
  /// If you want to express the figures for incomes and outcomes as 
  /// positive/negative numbers, you can also multiply this field value by 
  /// the attributed {@link shopping_deposits.direction} value.
  value Float @db.DoublePrecision

  /// Balance value.
  ///
  /// Total balance value after the transaction.
  balance Float @db.DoublePrecision

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  /// Cancelled time of record.
  cancelled_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  deposit shopping_deposits @relation(fields: [shopping_deposit_id], references: [id], onDelete: Cascade)
  citizen shopping_citizens @relation(fields: [shopping_citizen_id], references: [id], onDelete: Cascade)

  @@index([shopping_deposit_id, created_at, cancelled_at])
  @@index([shopping_deposit_id, source_id, created_at, cancelled_at])
  @@index([shopping_citizen_id, created_at, cancelled_at])
  @@index([created_at, cancelled_at])
}

/// Deposit deposit.
/// 
/// `shopping_deposit_charges` is an entity that symbolizes the act of a 
/// {@link shopping_customers customer} applying for a deposit to a shopping 
/// mall.
/// 
/// However, `shopping_deposit_charges` expresses the customer's intention to 
/// make a deposit, but it has not yet been confirmed. Only when the customer 
/// completes the {@link shopping_deposit_charge_publishes.paid_at payment} 
/// will the deposit increase be confirmed.
/// 
/// @namespace Coins
/// @author Samchon
model shopping_deposit_charges {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged metadata's {@link shopping_deposits.id}
  shopping_customer_id String @db.Uuid

  /// Charging amount.
  value Float @db.DoublePrecision

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  /// Deletion time of record.
  ///
  /// Only when be stopped before publishing.
  deleted_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  customer shopping_customers                 @relation(fields: [shopping_customer_id], references: [id], onDelete: Cascade)
  publish  shopping_deposit_charge_publishes?

  @@index([shopping_customer_id, created_at, deleted_at])
  @@index([created_at, deleted_at])
}

/// Payment progress information for deposits.
/// 
/// `shopping_deposit_charge_publishes` is an entity that embodies the process 
/// of a {@link shopping_customers customer} applying for a deposit and making 
/// a payment.
/// 
/// Please note that the existence of the `shopping_deposit_charge_publishes` 
/// record does not mean that payment has been completed. Payment is complete 
/// only when payment (`paid_at`) is complete. This is what the 
/// "process of payment" mentioned above means.
/// 
/// However, even after payment has been made, there may be cases where it is 
/// suddenly cancelled, so you must be careful about this as well.
/// 
/// @namespace Coins
/// @author Samchon
model shopping_deposit_charge_publishes {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged charge appliance's {@link shopping_deposit_charges.id}
  shopping_deposit_charge_id String @db.Uuid

  /// Password for encryption.
  /// 
  /// This shopping mall system uses a randomly issued password to encrypt 
  /// payment history, and is completely unrelated to the user.
  password String? @db.VarChar

  /// Creation time of record.
  ///
  /// Note that, this property does not mean the payment completion time.
  created_at DateTime @db.Timestamptz

  /// Completion time of payment.
  /// 
  /// This property is the only way to know if the payment has been 
  /// completed. If this property is null, the payment has not been 
  /// completed yet.
  paid_at DateTime? @db.Timestamptz

  /// The time when the payment was cancelled or reverted.
  cancelled_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  charge shopping_deposit_charges @relation(fields: [shopping_deposit_charge_id], references: [id], onDelete: Cascade)

  @@unique([shopping_deposit_charge_id])
}

/// Meta information of mileage.
/// 
/// `shopping_mileages` is an entity that embodies specifications for mileage 
/// deposits and outcomes at a shopping mall. In other words, 
/// `shopping_mileages` is not {@link shopping_mileage_histories}, which means 
/// mileage deposit and outcome history, but is simply metadata that 
/// specifies specifications for scenarios in which mileage is deposited and 
/// withdrawn.
///
/// @namespace Coins
/// @author Samchon
model shopping_mileages {
  /// Primary Key.
  id String @id @db.Uuid

  /// Identifier code.
  code String @db.VarChar

  /// The source table occurring the mileage event.
  source String @db.VarChar

  /// Direction of mileage.
  ///
  /// - `1`: Income
  /// - `-1`: outcome
  direction Int @db.Integer

  /// Default value of mileage.
  ///
  /// Possible to omit, and how to use this default value is up to the
  /// backend program. It is okay to use it as a default value when
  /// creating a new record, or percentage value to be applied.
  value Float? @db.DoublePrecision

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  /// Deletion time of record.
  deleted_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  histories shopping_mileage_histories[]

  @@unique([code])
  @@index([source])
  @@index([created_at])
}

/// @namespace Coins
/// @author Samchon
model shopping_mileage_donations {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged seller's {@link shopping_customers.id}
  shopping_admin_customer_id String @db.Uuid

  /// Belonged citizen's {@link shopping_citizens.id}
  shopping_citizen_id String @db.Uuid

  /// Amount of donation.
  value Float @db.DoublePrecision

  /// Reason of donation.
  reason String

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  //----
  // RELATIONS
  //----
  adminCustomer shopping_customers @relation(fields: [shopping_admin_customer_id], references: [id], onDelete: Cascade)
  citizen       shopping_citizens  @relation(fields: [shopping_citizen_id], references: [id], onDelete: Cascade)

  @@index([shopping_admin_customer_id])
  @@index([shopping_citizen_id, created_at])
}

/// Mileagea income/outcome details of customers (citizens).
///
/// `shopping_mileage_histories` is an entity that embodies the 
/// {@link shopping_customers customer}'s deposit/outcome history.
///
/// You can think of it as a kind of accounting ledger table. Therefore, 
/// note that, `value` must have positive number only, even if it is a 
/// outcome. The minus value must be expressed by multiplying the 
/// {@link shopping_mileages.direction} value of the corresponding.
///
/// @namespace Coins
/// @author Samchon
model shopping_mileage_histories {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged metadata's {@link shopping_mileages.id}
  shopping_mileage_id String @db.Uuid

  /// Belonged citizen's {@link shopping_citizens.id}
  shopping_citizen_id String @db.Uuid

  /// The source record occurred income/outcome.
  source_id String @db.Uuid

  /// Income/outcome amount of mileage.
  /// 
  /// It must be a positive number, and you can check 
  /// {@link shopping_mileages.direction} for incomes and outcomes. 
  /// If you want to express the figures for incomes and outcomes as 
  /// positive/negative numbers, you can also multiply this field value by 
  /// the attributed {@link shopping_mileages.direction} value.
  value Float @db.DoublePrecision

  /// Balance value.
  ///
  /// Total balance value after the transaction.
  balance Float @db.DoublePrecision

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  /// Cancelled time of record.
  cancelled_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  mileage shopping_mileages @relation(fields: [shopping_mileage_id], references: [id], onDelete: Cascade)
  citizen shopping_citizens @relation(fields: [shopping_citizen_id], references: [id], onDelete: Cascade)

  @@index([shopping_mileage_id, created_at, cancelled_at])
  @@index([shopping_mileage_id, source_id, created_at, cancelled_at])
  @@index([shopping_citizen_id, created_at, cancelled_at])
  @@index([created_at, cancelled_at])
}

/// @hidden
model mv_shopping_deposit_balances {
  shopping_citizen_id String @id @db.Uuid
  value               Float  @db.DoublePrecision

  citizen shopping_citizens @relation(fields: [shopping_citizen_id], references: [id], onDelete: Cascade)
}

/// @hidden
model mv_shopping_mileage_balances {
  shopping_citizen_id String @id @db.Uuid
  value               Float  @db.DoublePrecision

  citizen shopping_citizens @relation(fields: [shopping_citizen_id], references: [id], onDelete: Cascade)
}
