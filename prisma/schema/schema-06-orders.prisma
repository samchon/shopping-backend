/// Order application information.
/// 
/// `shopping_orders` is an entity that embodies 
/// {@link shopping_customers customer}'s order application information. 
/// However, please note that at this time, you are still at the 
/// "order application" stage and not the "order confirmation" stage.
/// 
/// And as soon as a customer applies for an order, all 
/// {@link shopping_cart_commodities commodities} in the target shopping cart are 
/// promoted to {@link shopping_order_goods}, and those 
/// {@link shopping_order_goods} records are created under this 
/// `shopping_orders`. 
///
/// Of course, not all commodities in the target shopping cart become 
/// {@link shopping_order_goods}, but only those selected by the customer 
/// become the {@link shopping_order_goods}.
/// 
/// Sale | Cart | Order
/// -----|------|------
/// x | {@link shopping_carts} | {@link shopping_orders}
/// {@link shopping_sale_snapshots} | {@link shopping_cart_commodities} | {@link shopping_order_goods}
/// {@link shopping_sale_snapshot_unit_stocks} | {@link shopping_cart_commodity_stocks} | x
///
/// @namespace Orders
/// @author Samchon
model shopping_orders {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged customer's {@link shopping_customers.id}
  shopping_customer_id String @db.Uuid

  /// Target address' {@link shopping_addresses.id}
  shopping_address_id String? @db.Uuid

  /// Representative name of the order.
  name String @db.VarChar

  /// Amount of cash payment.
  cash Float @db.DoublePrecision

  /// Amount of deposit payment instead of cash.
  deposit Float @db.DoublePrecision

  /// Amount of mileage payment instead of cash.
  mileage Float @db.DoublePrecision

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  /// Deletion time of record.
  ///
  /// If order be published, unable to erase it. In that case, you
  /// {@link shopping_order_publishes.cancelled_at} instead, or utilize
  /// {@link shopping_order_good_reverts} instead.
  deleted_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  /// Belonged customer.
  customer shopping_customers @relation(fields: [shopping_customer_id], references: [id], onDelete: Cascade)

  /// Target address.
  address shopping_addresses? @relation(fields: [shopping_address_id], references: [id], onDelete: Cascade)

  /// Publish information.
  publish shopping_order_publishes?

  /// List of goods to purchase.
  goods shopping_order_goods[]

  /// List of paid tickets for discount
  ticket_payments shopping_coupon_ticket_payments[]
  mv_price        mv_shopping_order_prices?

  @@index([shopping_customer_id, created_at])
  @@index([created_at])
}

/// Information about the individual goods that make up your order.
/// 
/// `shopping_order_goods` is an entity that represents each good ordered 
/// by a {@link shopping_customers customer}, and the record is created in the 
/// process of upgrading the product {@link shopping_cart_commodities commodity} 
/// in the {@link shopping_carts shopping cart} to a good due to the customer's 
/// {@link shopping_orders order request}.
/// 
/// And `shopping_order_goods`, like {@link shopping_cart_commodities}, is a concept 
/// that corresponds to the listing 
/// {@link shopping_sale_snapshots sale snapshot}.
/// 
/// For reference, `shopping_order_goods` also contains `volume` information 
/// separately from the belonging {@link shopping_cart_commodities.volume}. This is 
/// because there are some cases where you put 3 books in your shopping cart 
/// and then change them to 4 during the actual order application process. 
/// This is to increase the reusability of the shopping cart by changing the 
/// volume attribute of the current entity rather than directly changing the 
/// shopping_cart_commodities information.
/// 
/// In addition, `shopping_order_goods` becomes the most basic unit for 
/// the post-order process, that is, after service (A/S). For example, 
/// after receiving a customer's product, confirming the order is recorded 
/// in the `confirmed_at` attribute. Additionally, `shopping_order_goods` is 
/// the unit in which customers issue issues or request exchanges or refunds 
/// for ordered products.
///
/// @namespace Orders
/// @author Samchon
model shopping_order_goods {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged order's {@link shopping_orders.id}
  shopping_order_id String @db.Uuid

  /// Belonged cart commodity's {@link shopping_cart_commodities.id}
  shopping_cart_commodity_id String @db.Uuid

  /// Belonged seller's {@link shopping_sellers.id}
  ///
  /// It can be computed by referencing related {@link shopping_sales},
  /// but denormalized for performance reason.
  ///
  /// @hidden
  shopping_seller_id String @db.Uuid

  /// Volume count.
  ///
  /// The value multiplied to {@link shopping_cart_commodity_stocks.quantity}.
  /// It's purpose is exactly same with {@link shopping_cart_commodities.volume},
  /// but rewritten because the {@link shopping_cart_commodities} records are
  /// reusable until payment.
  volume Int @db.Integer

  /// Sequence order(?) in belonged order.
  sequence Int @db.Integer

  /// Confirmation time of order good.
  ///
  /// When be confirmed, customer can't request refund or exchange.
  ///
  /// The confirmation be accomplished by following cases.
  ///
  /// - Customer does it directly.
  /// - 14 days after the delivery.
  confirmed_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  /// Belonged order.
  order shopping_orders @relation(fields: [shopping_order_id], references: [id], onDelete: Cascade)

  /// Belonged cart commodity.
  commodity shopping_cart_commodities @relation(fields: [shopping_cart_commodity_id], references: [id], onDelete: Cascade)

  /// Belonged seller.
  seller          shopping_sellers                 @relation(fields: [shopping_seller_id], references: [id], onDelete: Cascade)
  delivery_pieces shopping_delivery_pieces[]
  reviews         shopping_sale_snapshot_reviews[]

  mv_price mv_shopping_order_good_prices?
  mv_state mv_shopping_order_good_states?

  @@unique([shopping_order_id, shopping_cart_commodity_id])
  @@index([shopping_cart_commodity_id])
  @@index([shopping_seller_id])
}

/// Order completion and payment information.
/// 
/// `shopping_order_publishes` is an entity that embodies the series of 
/// processes in which a customer pays for his or her 
/// {@link shopping_orders order}, thereby completing the order. And only after 
/// the order is completed, can the seller recognize that the customer has 
/// purchased his product.
/// 
/// By the way, please note that just because the `shopping_order_publishes` 
/// record exists, it does not mean that the payment has been completed. 
/// Of course, with "credit cards" and "Google Pay", payment application and 
/// payment occur at the same time. However, there are some cases where 
/// payment is made after the payment application, such as "bank transfer" or 
/// "virtual account payment". Therefore, to see the completion of payment, 
/// be sure to check the `paid_at` property.
/// 
/// In addition, even after payment has been made, there may be cases where 
/// it is suddenly cancelled, so please be aware of this as well.
/// 
/// @namespace Orders
/// @author Samchon
model shopping_order_publishes {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged order's {@link shopping_orders.id}
  shopping_order_id String @db.Uuid

  /// Target address' {@link shopping_addresses.id}
  ///
  /// The place to receive the goods. For reference, the address information
  /// also has an information of receiver, and it can be different with the
  /// customer who has ordered.
  shopping_address_id String @db.Uuid

  /// Password for encryption.
  ///
  /// This shopping mall system uses a randomly issued password to 
  /// encrypt payment history, and is completely unrelated to the user.
  password String? @db.VarChar

  /// Creation time of record.
  ///
  /// Note that, this property does not mean the payment completion time.
  created_at DateTime @db.Timestamptz

  /// Completion time of payment.
  ///
  /// This property is the only way to know if the payment has been
  /// completed. If this property is `null`, the payment has not been
  /// completed yet.
  paid_at DateTime? @db.Timestamptz

  /// The time when the payment was cancelled or reverted.
  cancelled_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  /// Belonged order.
  order shopping_orders @relation(fields: [shopping_order_id], references: [id], onDelete: Cascade)

  /// Target address.
  address          shopping_addresses                        @relation(fields: [shopping_address_id], references: [id], onDelete: Cascade)
  pieces           shopping_delivery_pieces[]
  mv_state         mv_shopping_order_publish_states?
  mv_seller_states mv_shopping_order_publish_seller_states[]

  @@unique([shopping_order_id])
  @@index([created_at, paid_at, cancelled_at])
  @@index([paid_at, cancelled_at])
}

/// Delivery information.
///
/// When delivering {@link shopping_order_goods goods} to 
/// {@link shopping_customers customer}, {@link shopping_selleres seller} can deliver 
/// multiple {@link shopping_sale_snapshot_unit_stocks stocks}, goods at once. Also, 
/// it is possible to deliver a stock or good in multiple times due to physical 
/// restriction like volume or weight problem.
///
/// As you can see from above, the relationship between delivery with 
/// {@link shopping_orders order} (or good) is not 1: 1 or N: 1, but M: N. Entity 
/// `shopping_deliveries` has been designed to represent such relationship, by 
/// referencing target stocks or goods through subsidiary entity 
/// {@link shopping_delivery_pieces}.
///
/// Also, delivery does not end with only one step. It has multiple processes like
/// manufacturing, planning, shipping and delivering. Those steps are represented by
/// another subsidiary entity {@link shopping_delivery_journeys}.
///
/// @todo No shipper entity yet
/// @namespace Orders
/// @author Samchon
model shopping_deliveries {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged seller's {@link shopping_sellers.id}
  shopping_seller_customer_id String @db.Uuid

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  /// Deletion time of record.
  deleted_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  sellerCustomer shopping_customers           @relation(fields: [shopping_seller_customer_id], references: [id], onDelete: Cascade)
  journeys       shopping_delivery_journeys[]
  pieces         shopping_delivery_pieces[]
  shippers       shopping_delivery_shippers[]
  mv_state       mv_shopping_delivery_states?

  @@index([shopping_seller_customer_id, created_at])
  @@index([created_at])
}

/// Which stocks are delivered.
///
/// `shopping_delivery_pieces` is a subsidiary entity of {@link shopping_deliveries}, 
/// describing how much quantity is delivered for each 
/// {@link shopping_sale_snapshot_unit_stocks stock} in {@link shopping_orders}.
/// 
/// For reference, as an order can be delivered in multiple times due to volume or 
/// weight problem, it is possible to have multiple `shopping_delivery_pieces` records 
/// for a single stock.
///
/// @namespace Orders
/// @author Samchon
model shopping_delivery_pieces {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged delivery's {@link shopping_deliveries.id}
  shopping_delivery_id String @db.Uuid

  /// Target order-publish'es {@link shopping_order_publishes.id}
  shopping_order_publish_id String @db.Uuid

  /// Target good's {@link shopping_order_goods.id}
  shopping_order_good_id String @db.Uuid

  /// Target stock's {@link shopping_sale_snapshot_unit_stocks.id}
  shopping_sale_snapshot_unit_stock_id String @db.Uuid

  /// Quantity count.
  ///
  /// It can be precision value to express split shipping.
  quantity Float @db.DoublePrecision

  /// Sequence order in belonged delivery.
  sequence Int @db.Integer

  //----
  // RELATIONS
  //----
  delivery shopping_deliveries                @relation(fields: [shopping_delivery_id], references: [id], onDelete: Cascade)
  publish  shopping_order_publishes           @relation(fields: [shopping_order_publish_id], references: [id], onDelete: Cascade)
  good     shopping_order_goods               @relation(fields: [shopping_order_good_id], references: [id], onDelete: Cascade)
  stock    shopping_sale_snapshot_unit_stocks @relation(fields: [shopping_sale_snapshot_unit_stock_id], references: [id], onDelete: Cascade)

  @@index([shopping_delivery_id])
  @@index([shopping_order_good_id])
}

/// Shipper information of delivery.
///
/// @namespace Orders
/// @author Samchon
model shopping_delivery_shippers {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged delivery's {@link shopping_deliveries.id}
  shopping_delivery_id String @db.Uuid

  /// Mobile number of shipper.
  mobile String @db.VarChar

  /// Name of shipper.
  name String @db.VarChar

  /// Company of shipper.
  company String? @db.VarChar

  created_at DateTime @db.Timestamptz

  //----
  // RELATIONS
  //----
  delivery shopping_deliveries @relation(fields: [shopping_delivery_id], references: [id], onDelete: Cascade)

  @@index([shopping_delivery_id])
}

/// Journey of delivery.
///
/// `shopping_delivery_journeys` is a subsidiary entity of {@link shopping_deliveries}, 
/// describing each journey of the delivery. For reference, the word journey means 
/// each step of the delivery process, such as preparing, shipping, and delivering 
/// {@link shopping_order_goods goods} to the {@link shopping_customers customer}.
///
/// @namespace Orders
/// @author Samchon
model shopping_delivery_journeys {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged delivery's {@link shopping_deliveries.id}
  shopping_delivery_id String @db.Uuid

  /// Type of journey.
  ///
  /// - preparing
  /// - manufacturing
  /// - shipping
  /// - delivering
  type String @db.VarChar

  /// Title of journey.
  title String? @db.VarChar

  /// Description of journey.
  description String?

  /// Sequence order in belonged delivery.
  sequence Int @db.Integer

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  /// Start time of journey.
  started_at DateTime? @db.Timestamptz

  /// Completion time of journey.
  completed_at DateTime? @db.Timestamptz

  /// Deletion time of record.
  deleted_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  /// Belonged delivery.
  delivery shopping_deliveries @relation(fields: [shopping_delivery_id], references: [id], onDelete: Cascade)

  @@index([shopping_delivery_id])
}

/// @hidden
model mv_shopping_order_prices {
  shopping_order_id String @id @db.Uuid
  quantity          Int    @db.Integer
  nominal           Float  @db.DoublePrecision
  real              Float  @db.DoublePrecision
  ticket            Float  @db.DoublePrecision

  order shopping_orders @relation(fields: [shopping_order_id], references: [id], onDelete: Cascade)
}

/// @hidden
model mv_shopping_order_good_prices {
  shopping_order_good_id String @id @db.Uuid
  nominal                Float  @db.DoublePrecision
  real                   Float  @db.DoublePrecision
  cash                   Float  @db.DoublePrecision
  deposit                Float  @db.DoublePrecision
  mileage                Float  @db.DoublePrecision
  ticket                 Float  @db.DoublePrecision

  good shopping_order_goods @relation(fields: [shopping_order_good_id], references: [id], onDelete: Cascade)
}

/// @hidden
model mv_shopping_order_publish_states {
  shopping_order_publish_id String @id @db.Uuid
  value                     String @db.VarChar

  publish shopping_order_publishes @relation(fields: [shopping_order_publish_id], references: [id], onDelete: Cascade)
}

/// @hidden
model mv_shopping_order_good_states {
  shopping_order_good_id String @id @db.Uuid
  value                  String @db.VarChar

  good shopping_order_goods @relation(fields: [shopping_order_good_id], references: [id], onDelete: Cascade)
}

/// @hidden
model mv_shopping_order_publish_seller_states {
  id                        String @id @db.Uuid
  shopping_order_publish_id String @db.Uuid
  shopping_seller_id        String @db.Uuid
  value                     String @db.VarChar

  publish shopping_order_publishes @relation(fields: [shopping_order_publish_id], references: [id], onDelete: Cascade)
  seller  shopping_sellers         @relation(fields: [shopping_seller_id], references: [id], onDelete: Cascade)

  @@unique([shopping_order_publish_id, shopping_seller_id])
  @@index([shopping_order_publish_id])
}

/// @hidden
model mv_shopping_delivery_states {
  shopping_delivery_id String @id @db.Uuid
  value                String @db.VarChar

  delivery shopping_deliveries @relation(fields: [shopping_delivery_id], references: [id], onDelete: Cascade)
}
