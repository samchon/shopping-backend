/// Discount coupon.
/// 
/// `shopping_coupons` is an entity that symbolizes discount coupons at a 
/// shopping mall.
/// 
/// Note that, `shopping_coupons` only contains specification information 
/// about discount coupons. Please keep in mind that this is a different 
/// concept from {@link shopping_coupon_tickets}, which refers to the issuance 
/// of a discount coupon, or {@link shopping_coupon_ticket_payments}, which 
/// refers to its payment.
/// 
/// Additionally, discount coupons are applied on an 
/// {@link shopping_orders order-by-order} basis, but each has its own unique 
/// restrictions. For example, a coupon with 
/// {@link shopping_coupon_seller_criterias} may or may not be used only for 
/// {@link shopping_sale_snapshots snapshots} of listings registered by the 
/// {@link shopping_sellers seller}. Also, there are restrictions such as 
/// minimum amount restrictions for using discount coupons and maximum discount 
/// amount limits.
/// 
/// In addition, you can set whether to issue discount coupons publicly or give 
/// them only to people who know the specific issuing code. In addition, there 
/// are restrictions such as issued discount coupons having an expiration date 
/// or being issued only to customers who came in through a 
/// {@link shopping_coupon_funnel_criterias specific funnel}.
/// 
/// For more information, please refer to the properties below and the 
/// subsidiary entities described later.
/// 
/// @namespace Coupons
/// @author Samchon
model shopping_coupons {
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged administrator or seller's {@link shopping_customers.id}
  shopping_customer_id String @db.Uuid

  /// Type of the coupon creator.
  ///
  /// - administrator
  /// - seller
  actor_type String @db.VarChar

  /// Reprensentative name of coupon.
  name String @db.VarChar

  /// Access level of coupon.
  ///
  /// - `public`: possible to find from public API
  /// - `private`: unable to find from public API
  ///   - arbitrarily assigned by the seller or administrator
  ///   - issued from one-time link
  access String @db.VarChar

  /// Exclusivity or not.
  /// 
  /// An exclusive discount coupon refers to a discount coupon that has an 
  /// exclusive relationship with other discount coupons and can only be used 
  /// alone. That is, when an exclusive discount coupon is used, no other 
  /// discount coupon can be used for the same {@link shopping_orders order} 
  /// or {@link shopping_order_goods good}.
  /// 
  /// Please note that this `exclusive` attribute is a very different 
  /// concept from `multiplicative`, which means whether the same coupon 
  /// can be multiplied and applied to multiple coupons of the same order, 
  /// so please do not confuse them.
  exclusive Boolean @db.Boolean

  /// Discount unit.
  ///
  /// - amount: Absolute value
  /// - percent: 0 ~ 100 %
  unit String @db.VarChar

  /// Discount value.
  ///
  /// If `unit` is percent, range of value is limited from 0 to 100.
  value Float @db.DoublePrecision

  /// Minimum purchase amount for discount.
  /// 
  /// When setting this value, discount coupons cannot be applied to 
  /// order totals that are less than this value.
  threshold Float? @db.DoublePrecision

  /// Maximum amount available for discount.
  /// 
  /// When this value is set, no further discount will be given no matter 
  /// how much you order.
  limit Int? @db.Integer /// @format uint @minimum 1

  /// Whether be multiplied to volume or not.
  ///
  /// `multiplicative` is a property which means whether the same coupon
  /// can be multiplied to the volume of order or not. It would be meaningful 
  /// only when the unit of discount is "amount". Otherwise, it's always `false`.
  /// 
  /// Therefore, if the `multiplicative` value is `true`, the discount amount
  /// will be multiplied by the volume of order. For example, if the discount
  /// amount is `1,000 won` and the volume of order is `3`, the total discount 
  /// amount will be `3,000 won`.
  ///
  /// For reference, if there's a good that its price is lower than the amount 
  /// value, the good wouldn't be discounted.
  ///
  /// ex) `5,000 won` coupon and `10` volume of order
  /// 
  /// - `false`: Only `5,000 won` would be discounted
  /// - `true`: `50,000 won` would be discounted
  multiplicative Boolean @db.Boolean

  /// Limited quantity issued.
  /// 
  /// If there is a limit to the quantity issued, it becomes impossible to 
  /// issue tickets exceeding this value.
  /// 
  /// In other words, the concept of N coupons being issued on a first-come, 
  /// first-served basis is created.
  volume Int? @db.Integer

  /// Limited quantity issued per person.
  /// 
  /// As a limit to the total amount of issuance per person, it is common to 
  /// assign 1 to limit duplicate issuance to the same citizen, or to use 
  /// the `NULL` value to set no limit.
  /// 
  /// Of course, by assigning a value of N, the total amount issued to the 
  /// same citizen can be limited.
  volume_per_citizen Int? @db.Integer

  /// Expiration day(s) value.
  /// 
  /// The concept of expiring N days after a discount coupon ticket is issued.
  /// 
  /// Therefore, customers must use the ticket within N days, if possible, 
  /// from the time it is issued.
  expired_in Int? @db.Integer

  /// Expiration date.
  /// 
  /// A concept that expires after YYYY-MM-DD after a discount coupon ticket 
  /// is issued.
  /// 
  /// Double restrictions are possible with `expired_in`, of which the one 
  /// with the shorter expiration date is used.
  expired_at DateTime? @db.Timestamptz

  /// Opening time of the coupon.
  opened_at DateTime? @db.Timestamptz

  /// Closing time of the coupon.
  /// 
  /// Tickets cannot be issued after this time.
  /// 
  /// However, previously issued tickets can still be used until their 
  /// expiration date.
  closed_at DateTime? @db.Timestamptz

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  /// Update time of record.
  ///
  /// Only possible to update until `opened_at`.
  updated_at DateTime @db.Timestamptz

  /// Deletion time of record.
  ///
  /// Pre-issued tickets can still be used until their expiration date.
  deleted_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  /// Administrator or seller who've designed this coupon.
  customer shopping_customers @relation(fields: [shopping_customer_id], references: [id], onDelete: Cascade)

  /// List of criterias.
  criterias shopping_coupon_criterias[]

  /// List of one-time issuance codes.
  ///
  /// If the `accessor` value of this discount coupon is private, a dedicated 
  /// code is required to issue a ticket for the discount coupon. A list of 
  /// those one-time use codes. 
  disposables shopping_coupon_disposables[]

  /// List of tickets.
  ///
  /// Histories of tickets issued to customers.
  tickets                shopping_coupon_tickets[]
  mv_inventory           mv_shopping_coupon_inventories?
  mv_citizen_inventories mv_shopping_coupon_citizen_inventories[]

  @@index([shopping_customer_id, actor_type])
  @@index([name(ops: raw("gin_trgm_ops"))], type: Gin)
  @@index([created_at])
  @@index([opened_at])
}

/// Supertype for the applicable conditions of the discount coupon.
/// 
/// `shopping_coupon_criterias` is a supertype entity that embodies the 
/// conditions for applying a {@link shopping_coupons discount coupon}. All 
/// subtype entities that wish to impose constraints on the reference unit of 
/// a discount coupon were created by inheriting this. For example, the 
/// {@link shopping_coupon_section_criterias} entity, designed to limit 
/// application to a specific {@link shopping_sections section}, inherits this 
/// entity `shopping_coupon_criterias`.
/// 
/// In addition, constraints on reference units can be specified through the 
/// `direction` property to proceed as an inclusion condition or, conversely, 
/// as an exclusion condition. If the direction value is "include", the coupon 
/// is applicable only to the reference object. Conversely, if the direction 
/// value is "exclude", it is a coupon that cannot be applied to the reference 
/// object.
/// 
/// @namespace Coupons
/// @author Samchon
model shopping_coupon_criterias {
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged coupon's {@link shopping_coupons.id}
  shopping_coupon_id String @db.Uuid

  /// Type of criteria.
  ///
  /// It means which subtype being used.
  type String @db.VarChar

  /// Direction of criteria.
  ///
  /// - include
  /// - exclude
  direction String @db.VarChar

  /// Sequence order in belonged coupon.
  sequence Int @db.Integer

  //----
  // RELATIONS
  //----
  /// Belonged coupon.
  coupon shopping_coupons @relation(fields: [shopping_coupon_id], references: [id], onDelete: Cascade)

  of_section shopping_coupon_section_criterias?
  of_sale    shopping_coupon_sale_criterias?
  of_funnel  shopping_coupon_funnel_criterias?
  of_seller  shopping_coupon_seller_criterias?

  @@index([shopping_coupon_id])
}

/// Conditions for sections of discount coupons.
/// 
/// `shopping_coupon_section_criterias` is a subtype entity of 
/// {@link shopping_coupon_criterias} and is used when setting conditions for 
/// a specific {@link shopping_sections section}.
/// 
/// If the {@link shopping_coupon_criterias.direction} value is "include", 
/// the coupon can only be used for that section. Conversely, if it is 
/// "exclude", the coupon cannot be used. And if there are multiple 
/// `shopping_coupon_section_criterias` records within one coupon, conditions 
/// are applied on a bundle basis. Coupons may or may not be applicable to 
/// eligible sections.
/// 
/// @namespace Coupons
/// @author Samchon
model shopping_coupon_section_criterias {
  /// Primary Key.
  id String @id @db.Uuid

  /// Target section's {@link shopping_coupon_criterias.id}
  shopping_section_id String @db.Uuid

  //----
  // RELATIONS
  //----
  /// Supertype entity.
  base shopping_coupon_criterias @relation(fields: [id], references: [id], onDelete: Cascade)

  /// Belonged section.
  section shopping_sections @relation(fields: [shopping_section_id], references: [id], onDelete: Cascade)

  @@index([shopping_section_id])
}

/// Conditions for sellers of discount coupons.
/// 
/// `shopping_coupon_seller_criterias` is a subtype entity of 
/// {@link shopping_coupon_criterias} and is used when setting conditions for 
/// a specific {@link shopping_sellers seller}.
/// 
/// If the {@link shopping_coupon_criterias.direction} value is "include", the 
/// coupon can only be used for that seller. Conversely, if it is "exclude", 
/// the coupon cannot be used.
/// 
/// And if there are multiple `shopping_coupon_seller_criterias` records within 
/// one coupon, conditions are applied on a bundle basis. Coupons may or may 
/// not be applicable to eligible sellers.
/// 
/// @namespace Coupons
/// @author Samchon
model shopping_coupon_seller_criterias {
  /// PK + FK.
  id String @id @db.Uuid

  /// Target seller's {@link shopping_sellers.id}
  shopping_seller_id String @db.Uuid

  //----
  // RELATIONS
  //----
  /// Supertype entity.
  base shopping_coupon_criterias @relation(fields: [id], references: [id], onDelete: Cascade)

  /// Target seller.
  seller shopping_sellers @relation(fields: [shopping_seller_id], references: [id], onDelete: Cascade)

  @@index([shopping_seller_id])
}

/// Conditions for a specific item in a discount coupon.
/// 
/// `shopping_coupon_sale_criterias` is a subtype entity of 
/// {@link shopping_coupon_criterias} and is used when setting conditions for 
/// a specific {@link shopping_sales sale}.
/// 
/// If the {@link shopping_coupon_criterias.direction} value is "include", 
/// the coupon can only be used for that item. Conversely, if it is "exclude", 
/// it is a coupon that cannot be used.
/// 
/// And if there are multiple shopping_coupon_sale_criterias records within one coupon, conditions are applied on a bundle basis. Coupons that may or may not be applicable to target properties.
///
/// @namespace Coupons
/// @author Samchon
model shopping_coupon_sale_criterias {
  /// PK + FK.
  id String @id @db.Uuid

  /// Target sale's {@link shopping_sales.id}
  shopping_sale_id String @db.Uuid

  //----
  // RELATIONS
  //----
  /// Supertype entity.
  base shopping_coupon_criterias @relation(fields: [id], references: [id], onDelete: Cascade)

  /// Target sale.
  sale shopping_sales @relation(fields: [shopping_sale_id], references: [id], onDelete: Cascade)

  @@index([shopping_sale_id])
}

/// Limit the funnel of discount coupons.
/// 
/// `shopping_coupon_funnel_criterias` is a subtype entity of 
/// {@link shopping_coupon_criterias}, and is used when you want to issue or 
/// exclude discount coupons only to {@link shopping_customers customers} who 
/// came from a specific path.
/// 
/// And funnel restrictions are possible in 3 ways: The first is 
/// {@link shopping_customers.referrer}, and by parsing 
/// {@link shopping_customers.href}, which records the customer's access 
/// address, restrictions can be made in units of specific URLs or variables.
/// 
/// @namespace Coupons
/// @author Samchon
model shopping_coupon_funnel_criterias {
  /// PK + FK.
  id String @id @db.Uuid

  /// What kind of funnel is it?
  ///
  /// - path
  /// - referrer
  /// - variable
  kind String @db.VarChar

  /// Key name of funnel, when `kind` is "variable".
  key String? @db.VarChar

  /// Value of funnel.
  value String @db.VarChar

  //----
  // RELATIONS
  //----
  /// Supertype entity.
  base shopping_coupon_criterias @relation(fields: [id], references: [id], onDelete: Cascade)
}

/// Discount coupon ticket issuance details.
/// 
/// `shopping_coupon_tickets` is an entity that symbolizes 
/// {@link shopping_coupons discount coupon} tickets issued by 
/// {@link shopping_customers customers}.
/// 
/// And if the target discount coupon specification itself has an expiration 
/// date, the expiration date is recorded in `expired_at` and is automatically 
/// discarded after that expiration date. Of course, it doesn't matter if you 
/// use the discount coupon for your order within the deadline.
/// 
/// @namespace Coupons
/// @author Samchon
model shopping_coupon_tickets {
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged customer's {@link shopping_customers.id}
  shopping_customer_id String @db.Uuid

  /// Belonged coupon's {@link shopping_coupons.id}
  shopping_coupon_id String @db.Uuid

  /// Belonged disposable's {@link shopping_coupon_disposables.id}
  ///
  /// Only when current ticket be issued from one-time code.
  shopping_coupon_disposable_id String? @db.Uuid

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  /// Expiration time of ticket.
  expired_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  /// Belonged customer.
  customer shopping_customers @relation(fields: [shopping_customer_id], references: [id], onDelete: Cascade)

  /// Belonged coupon.
  coupon shopping_coupons @relation(fields: [shopping_coupon_id], references: [id], onDelete: Cascade)

  /// Belonged disposable when issued from one-time code.
  disposable shopping_coupon_disposables? @relation(fields: [shopping_coupon_disposable_id], references: [id], onDelete: Cascade)

  /// Payment information.
  payment shopping_coupon_ticket_payments?

  @@unique([shopping_coupon_disposable_id])
  @@index([shopping_customer_id, created_at])
  @@index([shopping_coupon_id, created_at])
}

/// Discount coupon ticket payment details.
/// 
/// `shopping_coupon_ticket_payments` is an entity that embodies the payment 
/// information for the {@link shoppiing_orders order} of  
/// {@link shopping_coupon_tickets}, and is used when a consumer uses the 
/// discount coupon ticket he or she was issued to order and has the payment 
/// amount deducted.
/// 
/// And since {@link shopping_orders} itself is not an entity used in situations 
/// where an order is completed, but rather an entity designed to express an 
/// order request, the creation of this `shopping_coupon_ticket_payments` record 
/// does not actually mean that the attached ticket disappears. Until the 
/// {@link shopping_customers customer} 
/// {@link shopping_order_publishes.paid_at completes the payment} and 
/// confirms the order, the ticket can be understood as a kind of deposit.
/// 
/// Additionally, this record can be deleted by the customer reversing the 
/// payment of the ticket, but it can also be deleted when the attribution 
/// order itself is cancelled.
/// 
/// @namespace Coupons
/// @author Samchon
model shopping_coupon_ticket_payments {
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged ticket's {@link shopping_coupon_tickets.id}
  shopping_coupon_ticket_id String @db.Uuid

  /// Target order's {@link shopping_orders.id}
  shopping_order_id String @db.Uuid

  /// Sequence order(?) in belonged order.
  sequence Int @db.Integer

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  /// Deletion time of record.
  ///
  /// In other words, it means that the target order be erased or payment 
  /// be cancelled.
  deleted_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  /// Belonged ticket.
  ticket shopping_coupon_tickets @relation(fields: [shopping_coupon_ticket_id], references: [id], onDelete: Cascade)

  /// Target order.
  order shopping_orders @relation(fields: [shopping_order_id], references: [id], onDelete: Cascade)

  @@unique([shopping_coupon_ticket_id])
  @@index([shopping_order_id])
}

/// Discount coupon issuance code management.
/// 
/// If a {@link shopping_coupons discount coupon} is not public and anyone can 
/// receive the ticket, but can only be received by entering a specific 
/// password (one-time code), use this `shopping_coupon_disposables` entity.
/// 
/// I repeat again, the code code is "one-time use". In other words, if any of 
/// the customers enters the code, the code is discarded when the ticket 
/// issuance to the customer is completed. Therefore, if you want to issue 
/// tickets multiple times using a discount coupon as a secret code, the 
/// issuing code must also be supported by the corresponding quantity.
/// 
/// @namespace Coupons
/// @author Samchon
model shopping_coupon_disposables {
  /// Primary Key.
  id String @id @db.Uuid

  /// Belonged coupon's {@link shopping_coupons.id}
  shopping_coupon_id String @db.Uuid

  /// Identifier code.
  ///
  /// Another word, one-time password for issuance.
  code String @db.VarChar

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  /// Expired time of record.
  expired_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  /// Belonged discount coupon.
  coupon shopping_coupons @relation(fields: [shopping_coupon_id], references: [id], onDelete: Cascade)

  /// Ticket issued by this one-time code.
  ticket shopping_coupon_tickets?

  @@unique([code])
  @@index([shopping_coupon_id])
}

/// @hidden
model mv_shopping_coupon_inventories {
  shopping_coupon_id String @id @db.Uuid
  value              Int    @db.Integer

  coupon shopping_coupons @relation(fields: [shopping_coupon_id], references: [id], onDelete: Cascade)
}

/// @hidden
model mv_shopping_coupon_citizen_inventories {
  id                  String @id @db.Uuid
  shopping_coupon_id  String @db.Uuid
  shopping_citizen_id String @db.Uuid
  value               Int    @db.Integer

  citizen shopping_citizens @relation(fields: [shopping_citizen_id], references: [id], onDelete: Cascade)
  coupon  shopping_coupons  @relation(fields: [shopping_coupon_id], references: [id], onDelete: Cascade)

  @@unique([shopping_coupon_id, shopping_citizen_id])
  @@index([shopping_coupon_id])
}
